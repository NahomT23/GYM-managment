// // This is your Prisma schema file,
// // learn more about it in the docs: https://pris.ly/d/prisma-schema

// // Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// // Try Prisma Accelerate: https://pris.ly/cli/accelerate-init


// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema



generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id            String      @id
  email         String      @unique
  name          String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime

  sessions      Session[]   // This field represents the reverse relation for Session
  accounts      Account[]   // This field represents the reverse relation for Account

  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}



model Gym {
  id         String   @id @default(uuid())  
  name       String   
  adminEmail String    @unique
  admin      admin    @relation(fields: [adminEmail], references: [email]) 
  employees  employe[] 
  members    member[]  
}

model admin {
  id            String    @id @default(uuid())  
  name          String    
  email         String    @unique  
  password      String    
  gym           Gym?      @relation  
  employees     employe[] @relation(name: "AdminToEmployes") 
  members       member[]  @relation(name: "AdminToMembers")  
  createdAt     DateTime  @default(now())  
  updatedAt     DateTime  @updatedAt  
}


model employe {
  id              String       @id @default(uuid())
  firstName       String
  lastName        String
  phoneNo         String?      @unique
  email           String?      @unique
  createdBy       admin        @relation(fields: [createdById], references: [id], name: "AdminToEmployes")
  createdById     String
  password        String?
  gym             Gym          @relation(fields: [gymId], references: [id])
  gymId           String
  members         member[]     @relation(name: "EmployeToMembers")  
  updatedAt       DateTime     @updatedAt
  createdAt       DateTime     @default(now())
}

model member {
  id                  String       @id @default(uuid())
  firstName           String
  lastName            String
  age                 String
  sex                 Gender
  phoneNo             String       @unique
  emergencyNo         String       @unique
  emergencyNoName     String
  email               String?      @unique
  package             PackageType
  duration            PackageDuration
  medical             String?
  active              Boolean      @default(false)
  createdByAdmin      admin?       @relation(fields: [createdByAdminId], references: [id], name: "AdminToMembers")
  createdByAdminId    String?
  createdByEmploye    employe?     @relation(fields: [createdByEmployeId], references: [id], name: "EmployeToMembers")
  createdByEmployeId  String?
  gym                 Gym?         @relation(fields: [gymId], references: [id])  // Added gym field to complete the relation
  gymId               String?
  updatedAt           DateTime     @updatedAt
  createdAt           DateTime     @default(now())
}

enum Gender {
  Male
  Female
}

enum PackageType {
  NORMAL
  PLATINUM
  PREMIUM
}

enum PackageDuration {
  ONE_MONTH
  THREE_MONTHS
  SIX_MONTHS
}
